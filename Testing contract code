const{expect}=require("chai");
const { BigNumber, utils } = require("ethers");
describe("ERC721 Staking Contract",function(){
    let TestContract;
    let contract;
    let owner;
    let addr1;
    let addr2;

    beforeEach(async function(){
        TestContract=await ethers.getContractFactory("My721Token");
        [owner,addr1,addr2]=await ethers.getSigners();
        contract=await TestContract.deploy();
    });
    describe("Test contract", function () {
        it("Should set right owner",async function(){
        expect(await contract.owner()).to.equal(owner.address);})
        
        
        it("Should assign the token to the address",async function(){
        await contract.safeMint(owner.address,1);
        await contract.safeMint(owner.address,2);
        await contract.safeMint(owner.address,3);
        expect(await contract.balanceOf(owner.address)).to.equal(3);});
        
        
        it("Should give real owner of token",async function(){
        await contract.safeMint(owner.address,1);
        expect(await contract.ownerOf(1)).to.equal(owner.address);})
        
        
        it("Should assign the real name of token",async function(){
        expect(await contract.name()).to.equal("MyToken");});
        
        
        it("Should assign the real symbol of token",async function(){
        expect(await contract.symbol()).to.equal("MTK");});
        
        
        it("Should assign the stakeholders",async function(){
        await contract.addStaker(addr1.address);
        await contract.addStaker(addr2.address);
        const a=String(await contract.checkStakeholder(addr1.address));
        expect(a).to.equal("true");
        const b=String(await contract.checkStakeholder(addr2.address));
        expect(b).to.equal("true");})
        
        
        it("Should mint stakes",async function(){
        await contract.safeMint(owner.address,1);
        await contract.safeMint(owner.address,2);
        await contract.safeMint(owner.address,3);
        await contract.addStaker(owner.address);
        await contract.mintStakes([1,2,3]);
        const a=String(await contract.stakeof(owner.address));
        expect(a).to.equal('1,2,3');})
        
        
        it("Should provide proper rewards",async function(){
        await contract.safeMint(owner.address,1);
        await contract.safeMint(owner.address,2);
        await contract.addStaker(owner.address);
        await contract.mintStakes([1,2]);
        await contract.DistributeReward(owner.address);
        const a=await contract.rewards(owner.address);
        expect(a).to.equal(20);})
})})
